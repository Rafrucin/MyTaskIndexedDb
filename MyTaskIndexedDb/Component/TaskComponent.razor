@inject ITaskService _taskService


@*<div>
        <div class="col-auto">
            <div class="input-group mb-2">
                <div class="input-group-prepend">
                    <div class="input-group-text">Add Task</div>
                </div>
                <input type="text" @bind-value="model.TaskName" class="form-control bg-dark" id="inlineFormInputGroup" placeholder="New Task">
            </div>
                <button type="submit" class="btn btn-block btn-sm btn-secondary mt-2">Add</button>
        </div>

    </div>*@


<div class="p-2">
    <EditForm Model="@model" OnValidSubmit="AddNewTask">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="col-auto">
            <div class="input-group mb-2">
                <div class="input-group-prepend">
                    <div class="input-group-text">Add Task</div>
                </div>
                <input type="text" @bind-value="model.TaskName" class="form-control text-light bg-dark" id="inlineFormInputGroup" placeholder="New Task">
            </div>
            <button type="submit" class="btn btn-block btn-sm btn-secondary mt-2">Add</button>
        </div>
    </EditForm>
</div>

@if (myTasks == null)
{

    <p class=" ml-3 text-warning">Loading...</p>

}
else if (myTasks.Count == 0)
{
    <p class=" ml-3 text-warning">No tasks</p>
}
else
{
    <table class="table table-sm table-dark mx-1 mt-1 text-warning">
        <thead>
            <tr>
                <td class="text-white">Task</td>
                <td class="text-center text-white">Done?</td>
            </tr>
        </thead>
        <tbody>

            @foreach (var item in myTasks)
            {
                if (item.IsDone == "0")
                {
                    var t = item.TaskName;
                    <tr>
                        <td>@t</td>
                        <td class="text-center">
                            <button class="btn btn-sm btn-primary" type="button"
                                    @onclick="async () => await ItemDone(item)">
                                Done
                            </button>
                        </td>
                    </tr>
                }
            }

            @foreach (var item in myTasks)
            {
                if (item.IsDone == "1")
                {

                    var t = item.TaskName;
                    <tr class="text-muted">
                        <td>@t</td>
                        <td class="text-center">
                            <button class="btn btn-sm btn-info" type="button"
                                    @onclick="async () => await ItemDone(item)">
                                Back
                            </button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <div class="text-center">
        <button class="btn btn-sm btn-danger mb-1" type="button" @onclick="async () => await ClearDone()">Clear done</button>
    </div>
    <div class="text-white text-center p-2 badge">Tasks by Raf</div>
}
@code {

    string info = "Loading...";
    List<TaskModel> myTasks = new List<TaskModel>();
    TaskModel model = new TaskModel();

    protected async override Task OnInitializedAsync()
    {
        myTasks = await _taskService.GetTasksAsync();
    }

    private async Task AddNewTask()
    {
        await _taskService.AddTaskAsync(model);
        myTasks.Add(model);
        model = new TaskModel();
    }

    private async Task ItemDone(TaskModel item)
    {
        if (item.IsDone == "1")
        {
            item.IsDone = "0";
        }
        else
        {
            item.IsDone = "1";
        }

        await _taskService.EditTaskAsync(item);
    }

    private async Task ClearDone()
    {
        var DoneList = myTasks.Where(x => x.IsDone == "1").ToList();
        foreach (var item in DoneList)
        {
            await _taskService.DeleteTaskAsync(item);
            myTasks.Remove(item);
        }
    }

}